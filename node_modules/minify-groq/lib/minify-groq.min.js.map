{"version":3,"sources":["../src/minify-groq.js"],"names":["buildQuery","parts","args","len","length","query","i","JSON","stringify","charIsWhiteSpace","char","module","exports","groqQuery","_len","arguments","Array","_key","isArray","out","pos","inSingle","inDouble","prev","isWhiteSpace","prevWasWhiteSpace","trim"],"mappings":"aAAA,SAASA,EAAWC,EAAOC,GAGzB,IAFA,IAAMC,EAAMF,EAAMG,OACdC,EAAQ,GACHC,EAAI,EAAGA,EAAIH,EAAKG,IACvBD,GAASJ,EAAMK,GACXA,EAAIH,EAAM,IACZE,GAASE,KAAKC,UAAUN,EAAKI,KAIjC,OAAOD,EAGT,SAASI,EAAiBC,GACxB,MAAgB,MAATA,GAAyB,OAATA,GAA0B,OAATA,EAiD1CC,OAAOC,QA9CP,SAAgBC,GAAoB,IAAA,IAAAC,EAAAC,UAAAX,OAANF,EAAM,IAAAc,MAAAF,EAAA,EAAAA,EAAA,EAAA,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAANf,EAAMe,EAAA,GAAAF,UAAAE,GAClC,IAAMZ,EAAQW,MAAME,QAAQL,GAAab,EAAWa,EAAWX,GAAQW,EACjEV,EAAME,EAAMD,OAClB,GAAY,IAARD,EACF,MAAO,GAGT,IAAIgB,EAAM,GACNC,EAAM,EACNC,GAAW,EACXC,GAAW,EAEf,EAAG,CACD,IAAMC,EAAOlB,EAAMe,EAAM,GACnBV,EAAOL,EAAMe,GACbI,EAAef,EAAiBC,GAChCe,EAAoBhB,EAAiBc,GAC3CH,IAEa,MAATV,GAAyB,OAATa,EAMP,MAATb,GAAyB,OAATa,EAMhBF,GAAYC,EACdH,GAAOT,EAILc,GAAgBC,IAIpBN,GAAOT,IAdLW,GAAYA,EACZF,GAAOT,IAPPY,GAAYA,EACZH,GAAOT,SAoBFU,EAAMjB,GAEf,OAAOgB,EAAIO","sourcesContent":["function buildQuery(parts, args) {\n  const len = parts.length\n  let query = ''\n  for (let i = 0; i < len; i++) {\n    query += parts[i]\n    if (i < len - 1) {\n      query += JSON.stringify(args[i])\n    }\n  }\n\n  return query\n}\n\nfunction charIsWhiteSpace(char) {\n  return char === ' ' || char === '\\n' || char === '\\t'\n}\n\nfunction minify(groqQuery, ...args) {\n  const query = Array.isArray(groqQuery) ? buildQuery(groqQuery, args) : groqQuery\n  const len = query.length\n  if (len === 0) {\n    return ''\n  }\n\n  let out = ''\n  let pos = 0\n  let inSingle = false\n  let inDouble = false\n\n  do {\n    const prev = query[pos - 1]\n    const char = query[pos]\n    const isWhiteSpace = charIsWhiteSpace(char)\n    const prevWasWhiteSpace = charIsWhiteSpace(prev)\n    pos++\n\n    if (char === '\"' && prev !== '\\\\') {\n      inDouble = !inDouble\n      out += char\n      continue\n    }\n\n    if (char === \"'\" && prev !== '\\\\') {\n      inSingle = !inSingle\n      out += char\n      continue\n    }\n\n    if (inSingle || inDouble) {\n      out += char\n      continue\n    }\n\n    if (isWhiteSpace && prevWasWhiteSpace) {\n      continue\n    }\n\n    out += char\n  } while (pos < len)\n\n  return out.trim()\n}\n\nmodule.exports = minify\n"]}